// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const topUpEsimRequest = z.lazy(() => {
  return z.object({
    iccid: z.string().min(18).max(22),
    dataLimitInGb: z.number(),
    startDate: z.string(),
    endDate: z.string(),
    email: z.string().optional(),
    referenceId: z.string().optional(),
    startTime: z.number().optional(),
    endTime: z.number().optional(),
  });
});

/**
 *
 * @typedef  {TopUpEsimRequest} topUpEsimRequest
 * @property {string} - ID of the eSIM
 * @property {number} - Size of the package in GB. The available options are 1, 2, 3, 5, 8, 20GB
 * @property {string} - Start date of the package's validity in the format 'yyyy-MM-dd'. This date can be set to the current day or any day within the next 12 months.
 * @property {string} - End date of the package's validity in the format 'yyyy-MM-dd'. End date can be maximum 90 days after Start date.
 * @property {string} - Email address where the purchase confirmation email will be sent (excluding QR Code & activation steps)
 * @property {string} - An identifier provided by the partner to link this purchase to their booking or transaction for analytics and debugging purposes.
 * @property {number} - Epoch value representing the start time of the package's validity. This timestamp can be set to the current time or any time within the next 12 months.
 * @property {number} - Epoch value representing the end time of the package's validity. End time can be maximum 90 days after Start time.
 */
export type TopUpEsimRequest = z.infer<typeof topUpEsimRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const topUpEsimRequestResponse = z.lazy(() => {
  return z
    .object({
      iccid: z.string().min(18).max(22),
      dataLimitInGB: z.number(),
      startDate: z.string(),
      endDate: z.string(),
      email: z.string().optional(),
      referenceId: z.string().optional(),
      startTime: z.number().optional(),
      endTime: z.number().optional(),
    })
    .transform((data) => ({
      iccid: data['iccid'],
      dataLimitInGb: data['dataLimitInGB'],
      startDate: data['startDate'],
      endDate: data['endDate'],
      email: data['email'],
      referenceId: data['referenceId'],
      startTime: data['startTime'],
      endTime: data['endTime'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const topUpEsimRequestRequest = z.lazy(() => {
  return z
    .object({
      iccid: z.string().nullish(),
      dataLimitInGb: z.number().nullish(),
      startDate: z.string().nullish(),
      endDate: z.string().nullish(),
      email: z.string().nullish(),
      referenceId: z.string().nullish(),
      startTime: z.number().nullish(),
      endTime: z.number().nullish(),
    })
    .transform((data) => ({
      iccid: data['iccid'],
      dataLimitInGB: data['dataLimitInGb'],
      startDate: data['startDate'],
      endDate: data['endDate'],
      email: data['email'],
      referenceId: data['referenceId'],
      startTime: data['startTime'],
      endTime: data['endTime'],
    }));
});
